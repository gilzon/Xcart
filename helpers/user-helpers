const ObjectId = require("mongodb").ObjectId;
var db = require('../config/connection')
var collection = require('../config/collections')
const bcrypt = require('bcrypt')



module.exports = {
    doSignup: (userData) => {

        return new Promise(async (resolve, reject) => {

            userData.password = await bcrypt.hash(userData.password, 10);
            // console.log(userData.password);
            db.get().collection(collection.USER_COLLECTION).insertOne(userData).then((data) => {
                userData._id = data.insertedId
                // console.log(userData);
                resolve(userData)
            });
        })
    },



    doLogin: (userData) => {
        return new Promise(async (resolve, reject) => {
            let loginStatus = false
            let response = {}
            let user = await db.get().collection(collection.USER_COLLECTION).findOne({ email: userData.email })
            if (user) {
                bcrypt.compare(userData.password, user.password).then((status) => {
                    // console.log(user.password)
                    // console.log(userData.password)

                    if (status) {
                        console.log("login Success");
                        response.user = user
                        response.status = true
                        resolve(response)
                    } else {
                        console.log("Login Failed")
                        resolve({ status: false })
                    }
                })
            } else {
                console.log("Login failed")
                resolve({ status: false })
            }
        })
    },
    addToCart: (proId, userId) => {
        console.log(proId, userId)
        return new Promise(async (resolve, reject) => {
            let userCart = await db.get().collection(collection.CART_COLLECTON).findOne({ user: ObjectId(userId) })
            if (userCart) {
                db.get().collection(collection.CART_COLLECTON)
                    .updateOne({ user: ObjectId(userId) },
                        {
                            $push: { products: ObjectId(proId) }
                        }
                    ).then((response) => {
                        resolve()
                    })
            } else {
                let cartObj = {
                    user: ObjectId(userId),
                    products: [ObjectId(proId)]
                }
                db.get().collection(collection.CART_COLLECTON).insertOne(cartObj).then((response) => {
                    resolve()
                })
            }
        })

    },
    getCartProducts: (userId) => {
        return new Promise(async(resolve, reject) => {
            let cartItems = await db.get().collection(collection.CART_COLLECTON).aggregate([
                {
                    $match: { user: ObjectId(userId) }

                },

                {
                    $lookup: {
                        from: collection.PRODUCT_COLLECTION,
                        let: { prodList: '$products' },
                        pipeline: [
                            {
                                $match: {
                                    $expr: {
                                        $in: ['$_id', '$$prodList']
                                    }
                                }
                            }
                        ],
                        as: 'cartItems'
                    }
                }
            ]).toArray()
            resolve(cartItems[0],cartItems)
           
        })
    },
    getcartCount:(userId)=>{
        return new Promise(async(resolve, reject)=>{
            let cart=await db.get().collection(collection.CART_COLLECTON).findOne({user:ObjectId(userId)})
            if(cart){
                count=cart.products.length
            }
            resolve(count)
        })
    }
}
